import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
import asyncio

API_TOKEN = os.getenv('7825679766:AAEcmgkMdwUl77gkgSFBcrmxEk0WLsDEVBU')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# In-memory DB
user_data = {}

class AddProduct(StatesGroup):
    name = State()
    expiry = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        types.BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"),
        types.BotCommand(command="/list", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"),
        types.BotCommand(command="/remove", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"),
        types.BotCommand(command="/edit", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"),
        types.BotCommand(command="/settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    await bot.set_my_commands(commands)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
        "/list ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/remove ‚Äî –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
        "/edit ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
        "/settings ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    )

@dp.message_handler(commands=['add'])
async def add_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await AddProduct.name.set()

@dp.message_handler(state=AddProduct.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await AddProduct.expiry.set()

@dp.message_handler(state=AddProduct.expiry)
async def process_expiry(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        expiry_date = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    product = {
        "name": data['name'],
        "expiry": expiry_date
    }
    user_data.setdefault(message.from_user.id, []).append(product)

    await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞—Ç–æ–π {message.text}")
    await state.finish()

@dp.message_handler(commands=['list'])
async def list_products(message: types.Message):
    products = user_data.get(message.from_user.id, [])
    if not products:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        return
    text = "üìã –í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
    for idx, p in enumerate(sorted(products, key=lambda x: x['expiry']), 1):
        text += f"{idx}. {p['name']} ‚Äî –¥–æ {p['expiry'].strftime('%d.%m.%Y')}\n"
    await message.answer(text)

@dp.message_handler(commands=['remove'])
async def remove_product(message: types.Message):
    products = user_data.get(message.from_user.id, [])
    if not products:
        await message.answer("‚ùó –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for idx, p in enumerate(products, 1):
        keyboard.add(KeyboardButton(f"{idx}. {p['name']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    @dp.message_handler()
    async def process_remove(msg: types.Message):
        try:
            index = int(msg.text.split('.')[0]) - 1
            removed = user_data[msg.from_user.id].pop(index)
            await msg.answer(f"üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç '{removed['name']}' —É–¥–∞–ª—ë–Ω.", reply_markup=types.ReplyKeyboardRemove())
        except:
            await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

@dp.message_handler(commands=['edit'])
async def edit_product(message: types.Message):
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ ‚úèÔ∏è")

@dp.message_handler(commands=['settings'])
async def settings(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n(–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)")

async def notify_expiry():
    while True:
        now = datetime.now()
        for user_id, products in user_data.items():
            for p in products:
                days_left = (p['expiry'] - now).days
                if days_left in [3, 1, 0]:
                    await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ '{p['name']}' –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω." if days_left > 0 else f"‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è '{p['name']}'!")
        await asyncio.sleep(86400)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify_expiry())
    executor.start_polling(dp, skip_updates=True)
